// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subsrvpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SubServiceClient is the client API for SubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubServiceClient interface {
	Call(ctx context.Context, in *CallReq, opts ...grpc.CallOption) (*CallRes, error)
	Notify(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*NotifyRes, error)
	Pub(ctx context.Context, in *PubReq, opts ...grpc.CallOption) (*PubRes, error)
}

type subServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubServiceClient(cc grpc.ClientConnInterface) SubServiceClient {
	return &subServiceClient{cc}
}

func (c *subServiceClient) Call(ctx context.Context, in *CallReq, opts ...grpc.CallOption) (*CallRes, error) {
	out := new(CallRes)
	err := c.cc.Invoke(ctx, "/scatter.service.SubService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subServiceClient) Notify(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*NotifyRes, error) {
	out := new(NotifyRes)
	err := c.cc.Invoke(ctx, "/scatter.service.SubService/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subServiceClient) Pub(ctx context.Context, in *PubReq, opts ...grpc.CallOption) (*PubRes, error) {
	out := new(PubRes)
	err := c.cc.Invoke(ctx, "/scatter.service.SubService/Pub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubServiceServer is the server API for SubService service.
// All implementations must embed UnimplementedSubServiceServer
// for forward compatibility
type SubServiceServer interface {
	Call(context.Context, *CallReq) (*CallRes, error)
	Notify(context.Context, *NotifyReq) (*NotifyRes, error)
	Pub(context.Context, *PubReq) (*PubRes, error)
	mustEmbedUnimplementedSubServiceServer()
}

// UnimplementedSubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubServiceServer struct {
}

func (UnimplementedSubServiceServer) Call(context.Context, *CallReq) (*CallRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedSubServiceServer) Notify(context.Context, *NotifyReq) (*NotifyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedSubServiceServer) Pub(context.Context, *PubReq) (*PubRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pub not implemented")
}
func (UnimplementedSubServiceServer) mustEmbedUnimplementedSubServiceServer() {}

// UnsafeSubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubServiceServer will
// result in compilation errors.
type UnsafeSubServiceServer interface {
	mustEmbedUnimplementedSubServiceServer()
}

func RegisterSubServiceServer(s grpc.ServiceRegistrar, srv SubServiceServer) {
	s.RegisterService(&_SubService_serviceDesc, srv)
}

func _SubService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scatter.service.SubService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubServiceServer).Call(ctx, req.(*CallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scatter.service.SubService/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubServiceServer).Notify(ctx, req.(*NotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubService_Pub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubServiceServer).Pub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scatter.service.SubService/Pub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubServiceServer).Pub(ctx, req.(*PubReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scatter.service.SubService",
	HandlerType: (*SubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _SubService_Call_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _SubService_Notify_Handler,
		},
		{
			MethodName: "Pub",
			Handler:    _SubService_Pub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster/subsrvpb/sub_service.proto",
}
